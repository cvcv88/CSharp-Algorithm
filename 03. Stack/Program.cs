namespace _03._Stack
{
	internal class Program
	{
		/******************************************************
         * 스택 (Stack)
         * 
         * 선입후출(FILO), 후입선출(LIFO) 방식의 자료구조
         * 가장 최신 입력된 순서대로 처리해야 하는 상황에 이용
         * 
         * ex) UI에서 유용, 타이틀에서 화면 설정클릭 - 설정창 켜짐 - 기타 세부 황목 설정
         * 뒤로가기 하면 넣은 순서의 반대로 화면이 뜬다!
         * ex) 실행취소 Ctrl + z 도 스택의 형태로 실행된다.
         * ex) 프링글스 통
         ******************************************************/

		// <스택 구현>
		// 스택은 리스트를 사용법만 달리하여 구현 가능
		//
		// - 삽입 -
		//         top                      top
		//          ↓                        ↓
		// ┌─┬─┬─┬─┬─┬─┬─┬─┐      ┌─┬─┬─┬─┬─┬─┬─┬─┐
		// │1│2│3│4│5│ │ │ │  =>  │1│2│3│4│5│6│ │ │
		// └─┴─┴─┴─┴─┴─┴─┴─┘      └─┴─┴─┴─┴─┴─┴─┴─┘
		//
		// - 삭제 -
		//           top                  top
		//            ↓                    ↓
		// ┌─┬─┬─┬─┬─┬─┬─┬─┐      ┌─┬─┬─┬─┬─┬─┬─┬─┐
		// │1│2│3│4│5│6│ │ │  =>  │1│2│3│4│5│ │ │ │
		// └─┴─┴─┴─┴─┴─┴─┴─┘      └─┴─┴─┴─┴─┴─┴─┴─┘

		static void Main(string[] args)
		{
			Stack<int> stack = new Stack<int>(); // int형 스택

			for (int i = 0; i < 5; i++) // 입력 순서 : 0, 1, 2, 3, 4
			{
				stack.Push(i); // 스택에 집어 넣는다.
			}

			Console.WriteLine(stack.Peek()); // 스택의 최상단

			for (int i = 0; i < 5; i++) // 출력순서 : 4, 3, 2, 1, 0
			{
				int value = stack.Pop(); // 스택에서 뺀다.
				Console.WriteLine(value);
			}
		}
	}
}
